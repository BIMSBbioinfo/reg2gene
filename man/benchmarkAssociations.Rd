% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BenchmarkGInteractions.R
\name{benchmarkAssociations}
\alias{benchmarkAssociations}
\title{Benchmarks reg2gene models using benchmark data}
\usage{
benchmarkAssociations(reg2Gene, benchData, preFilter = FALSE,
  binary = FALSE, forceByName = FALSE, mc.cores = 1,
  ignore.strand = FALSE, ...)
}
\arguments{
\item{reg2Gene}{a \code{\link[InteractionSet]{GInteractions}} object output
from \code{\link{associateReg2Gene}}). Usually, 1st GRanges object, or anchor1
corresponds to the enahncer location, whereas the other GRanges object 
corresponds to the regulatory region locations.}

\item{benchData}{a \code{\link[InteractionSet]{GInteractions}} object output
from \code{\link{associateReg2Gene}}) or a list of GInteractions object. 
Both regions are used in the benchmarking procedure. 
This object stores benchmarking informations eg interacting region
coordinates from techniques such as HiC,eQTL studies...}

\item{preFilter}{(def:FALSE).  If TRUE, additional columns are added to the
input reg2Gene object (additionally to the Bench column that is reported by 
default) that
store info whether tested regions have any potential to be benchmarked.
Meaning, if all regulatory region-TSS pairs [anchor1 and anchor2 from
reg2Gene] do not overlap with any benchmark anchor1 or anchor2 location they
will be reported to be 0 (or no potential to be benchmarked at all), 
otherwise it is 1 (possible to be benchmarked).E.g. it selects reg2Gene 
regions only when both regulatory region and TSS  have overlapping regions 
somewhere in the benchmarking set; across all benchmark anchor pairs, but 
not necessarily overlapping regions of the same benchmark pair.
This info is
important to a priori remove high number of true negatives in 
regulatoryReg-TSS pairs, before running \code{\link{confusionMatrix}} since
TN are very abundant in the reg2gene dataset since benchmark dataset usually
covers much smaller regions of the genome (method limitations)}

\item{binary}{(def:FALSE) how many times reg2Gene interactions is observed in
the benchmark dataset(s). If TRUE, reports if overlap with benchmark dataset 
is observed at least once).}

\item{forceByName}{(def:FALSE) force benchmark data to have an equal gene 
coordinates as reg2gene if gene names overlap. IMPORTANT! Gene coordinates 
are necessarilly a second anchor of the input reg2gene and benchData objects,
and column with gene names needs to be called "name".}

\item{mc.cores}{possible to be runned in parallel. Argument for mclapply f();
how many cores to use.}

\item{ignore.strand}{argument to be passed to
\code{\link[IRanges]{findOverlaps}}. When set to TRUE, the strand 
information is ignored in the overlap analysis.}

\item{...}{further arguments to methods, not implemented yet}
}
\value{
GInteractions object with added benchmark results metadata [Bench 
column].Each column metadata column corresponds to one benchmark dataset 
analyzed if input is list() 
Values can be either 0/1 (not/benchmarked) or 0-n (how many times each 
gene-enhancer pair is benchmared).
}
\description{
The function that takes as input results of \code{\link{associateReg2Gene}} 
or any other modelling procedure implemente in \code{reg2gene} package,
and predefined benchmark dataset as 
\code{\link[InteractionSet]{GInteractions}} object.
This function adds a metadata column with info about benchmarking success -
whether tested regions are benchmarked or not.  
By default it reportes how many times interactions is observed in the 
benchmark dataset. If binary is set to TRUE, then vector of 0' and 1's is 
reported (1 - overlapping benchmark dataset at least once) and 0 (not
overlapping benchmark dataset at all).
}
\details{
GInteractions objects - an output of \code{\link{associateReg2Gene}}
[or a list of such objects] and benchmark dataset are overlaped. 
\code{\link[InteractionSet]{linkOverlaps}} between reg2Gene 
and benchmark object is performed, and for each input pair it is reported 
whether this pair is benchmarked or not,and how many times (if binary=F).
Criss-cross overlap of interacting regions is performed; thus is anchor1 from
benchmark dataset is overlapping anchor2 from tested dataset, than anchor2
from benchmark dataset needs to overlap anchor1 from tested datased, or
vice-versa. 

Additionally, details for preFilter option:
All benchmark regions that can be confirmed by any combination of 
enh/gene pairs [anchor1 or anchor2 form reg2Gene object] is obtained. Then
selected unique union of anchor1 or anchor2 form reg2Gene object is used
as anchor1-anchor2 pairs that can be benchmarked. Reasoning, if present in
this set anchor1 or anchor2 regions form reg2Gene object necessarily need to
have other member of the pair overlapping somewhere in benchmark dataset.
}
\examples{
# Creating testing and benchmarking dataset
require(GenomicRanges)
require(InteractionSet)
   
   reg2Gene <- GInteractions(GRReg1_toy,GRReg1_toy$reg)
   benchData <- GInteractions(GRReg2_toy,GRReg2_toy$reg)
   
benchmarkAssociations(reg2Gene,
            benchData,
            binary=FALSE)
            
benchmarkAssociations(reg2Gene,
            benchData,
            binary=TRUE)             

# add prefilter

benchmarkAssociations(reg2Gene,
            benchData,
            binary=TRUE,
            preFilter=TRUE) 
            
 # forceByName argument           
           
    reg2Gene$name <- reg2Gene$anchor1.name
    benchData$name <- benchData$anchor1.name
 
             benchmarkAssociations(reg2Gene,
                      benchData,
                      binary=TRUE,
                      forceByName = T)
                
##################   
# example for list:

# NOTE: anchor1.Bench1Exp & anchor1.Bench2Exp are expected/precalculated
# values for this benchmark example
 
  benchDataList <- list(benchData,reg2Gene)
  names(benchDataList) <- c("benchData1","benchData2")


reg2GeneB <- benchmarkAssociations(reg2Gene,
                        benchDataList,
                        ignore.strand=TRUE,
                        binary=FALSE,
                        mc.cores = 1)               
    
 # forceByName = T can work for benchmark lists as well
 
            benchDataList <- list(benchData,benchData[1:5])
            names(benchDataList) <- c("BL1","BL2")


  benchmarkAssociations(benchData=benchDataList,
                        reg2Gene = reg2Gene,
                        forceByName = T)
                            
                            
 # Checking what happends when anchor1&anchor2 both overlap only one region
 # in benchmark dataset?  OK, They are not benchmarked...
 
   benchmarkAssociations(reg2Gene[1],
               benchData[1])      

 # WARNING! 
 # However, one need to be careful when benchmarking anchors that overlap 
 # within test set (eg enhancer overlaps gene region), 
 # because these regions will be benchmarked.
   
   benchmarkAssociations(reg2Gene[5],
               benchData)           
                                    
}
\author{
Inga Patarcic
}
